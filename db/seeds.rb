# This file should contain all the record creation needed to seed the database with its default values.
# The data can then be loaded with the rails db:seed command (or created alongside the database with db:setup).
#
# Examples:
#
#   movies = Movie.create([{ name: 'Star Wars' }, { name: 'Lord of the Rings' }])
#   Character.create(name: 'Luke', movie: movies.first)
RefCode.create(ref_code:"3e9f5f7de14638431b88", ref_code_url:"?refcode=3e9f5f7de14638431b88", recipient_name:"daily javascript blog", recipient_url:"https://dailyjavascriptblog.netlify.com/")
RefCode.create(ref_code:"f0e0249dbfd0e3570bc3", ref_code_url:"?refcode=f0e0249dbfd0e3570bc3", recipient_name:"medium_strict_mode_post", recipient_url:"https://medium.com/p/e05f3c159d47")
RefCode.create(ref_code:"a06cd09fbcb77a77e44a", ref_code_url:"?refcode=a06cd09fbcb77a77e44a", recipient_name:"daily javascript twitter", recipient_url:"https://twitter.com/DJavascript")
RefCode.create(ref_code:"07db1276000a6629fcf0", ref_code_url:"?refcode=07db1276000a6629fcf0", recipient_name:"welcome_email", recipient_url:"")
RefCode.create(ref_code:"6c05f1aacbab4564f83f", ref_code_url:"?refcode=6c05f1aacbab4564f83f", recipient_name:"challenge_emails", recipient_url:"")
RefCode.create(ref_code:"4e3ca8d61ec6316ccdcb", ref_code_url:"?refcode=4e3ca8d61ec6316ccdcb", recipient_name:"facebook_groups", recipient_url:"")
RefCode.create(ref_code:"87c330adc26654ce70d4", ref_code_url:"?refcode=87c330adc26654ce70d4", recipient_name:"strict_mode_post", recipient_url:"techlondon.slack.com")
RefCode.create(ref_code:"75aeeca2bec8fdf629b6", ref_code_url:"?refcode=75aeeca2bec8fdf629b6", recipient_name:"strict_mode_post", recipient_url:"jrdevjobs.slack.com")
RefCode.create(ref_code:"874df1fa0030acbf6c18", ref_code_url:"?refcode=874df1fa0030acbf6c18", recipient_name:"strict_mode_post", recipient_url:"https://www.freecodecamp.org/forum/")
RefCode.create(ref_code:"2c8dd77e79a4a5c4534d", ref_code_url:"?refcode=2c8dd77e79a4a5c4534d", recipient_name:"strict_mode_post", recipient_url:"learnjs.slack.com")
RefCode.create(ref_code:"56afe4638c26c009f3e4", ref_code_url:"?refcode=56afe4638c26c009f3e4", recipient_name:"strict_mode_post", recipient_url:"https://www.reddit.com/r/javascript/")
RefCode.create(ref_code:"fc42aa9829a396e42fb3", ref_code_url:"?refcode=fc42aa9829a396e42fb3", recipient_name:"strict_mode_post", recipient_url:"discord.speakJS")
RefCode.create(ref_code:"ecf85b5bebb743ceb675", ref_code_url:"?refcode=ecf85b5bebb743ceb675", recipient_name:"upgrade_plan_link", recipient_url:"")
RefCode.create(ref_code:"77a734f4e926bf011148", ref_code_url:"?refcode=77a734f4e926bf011148", recipient_name:"betalist", recipient_url:"")

Challenge.create(challenge:"This question was recently asked at a FAANG (Facebook, Amazon, Apple, Netflix, or Google) interview:\n\nIn Unix based systems, to get to a directory, a series of directory names, slashes, and single and double dots are used. In this system, a single dot means stay within the nearest parent directory, and is therefore redundant. A double dot means to move up one directory. The following examples illustrate this usage:\n\n\"/root/.\" = \"/root\"\n\n\"/games/football/..\" = \"/games\"\n\n\"/weather/./clouds/../rain\" = \"/weather/rain\"\n\nFor this challenge, create a function called simplifiedDirectory() where the input will be a string containing a route to a directory, and the return value has to be the directory route reduced to it's simplest form.\n")
Challenge.create(challenge:"When you're taking your online or in-person coding challenge, you will be time restricted. Because of this, knowing a few frequently used methods, belonging to particular object types, can be very useful.\n\nSome of these include:\n\nfor strings:  indexOf (which finds the index of a string within a string), substr() (which returns a substring from within a string), and split() (which returns a string split into an array)\n\nfor arrays: sort() (sorts an array), map() (puts each element into a function and stores the return values into a new array), and join() (combines all the elements of an array into a string)\n\nfor numbers: parseInt() (converts a string into an integer if it contains integers), parseFloat() (converts a string into a floating point number if it contains a floating point number), isNan() (used to test if a variable is a number, returns true if variable is NOT a number, and false if variable is a number).\n\nAlthough this list is not exhaustive, the three methods within each type of object are used frequently enough in coding tests, that it is good to become familiar with their use. Please check our blog for an article (or an upcoming article if it does not already exist) on more detail about these methods.")
Challenge.create(challenge:"You are given an integer and you have to return a new integer that is the square of every digit in the original integer. For example:\n\n12 = 14 because 1 squared is 1, and 2 squared is 4.\n\n1361 = 19361 because 1 squared is 1, 3 squared is 9, 6 squared is 36, and 1 squared is 1.\n\nMake a function called makeSquares() that takes an integer as an input, and returns a new integer in which the digits are the squares of the input integer.")
Challenge.create(challenge:"For this challenge, you will be given a string and an integer corresponding to the index of a letter in the string. You must take the letter at that index, double it, and return the new string with the doubled letter.\n\nFor example:\n\n\"water\" and index 2 = \"watter\" because w is at index 0, a is at index 1, and t is at index 2. The t is doubled to tt, and therefore the new string is \"watter\"\n\n\"shipyard\" and index 5 = \"shipyaard\"\n\nYou must create a function called doubleLetter() that takes as input a string and an integer, and returns a new string with the letter at that integer index doubled.")
Challenge.create(challenge:"Given a string, and then given a second string with the letters of the first string re-arranged, determine how many moves it takes to make string one into string two. For the purpose of this challenge, if adjacent letters can be moved together, that can be counted as a single unit being moved, instead of having to move each letter individually. \n\nFor example:\n\noriginal string: \"twitter\", second string: \"ittertw\" - this would take five moves, because the \"t\" and the \"w\" are adjacent and can be moved together.\n\noriginal string: \"twitter\", second string: \"wtittre\" - this would take two moves, first the \"t\" at the beginning would move one position to the right, then the \"e\" would move one position to the right, for a total of two moves.\n\nFor this challenge, you will create a function called countMoves(), which takes two inputs, the first input is the original string, the second input is the re-arranged string, and you must return the total number of moves it took to get from string one to string two. Remember, if adjacent letters can be moved together, they can be counted as a single unit.")
Challenge.create(challenge:"This question was recently asked at a FAANG (Facebook, Amazon, Apple, Netflix, or Google) interview:\n\nGiven a sorted array of integers, remove all duplicates and return the new length.\nYou can not use another array to complete this challenge.\n\nExample 1:\n\nGiven intArray = [3,3,5],\n\nYour function should return length = 2, with the first two elements of array being 3 and 5 respectively.\n\nExample 2:\n\nGiven intArray = [2,2,3,3,3,1,1,4,4,5],\n\nYour function should return length = 5, with the first five elements of the array being modified to 1, 2, 3, 4, and 5 respectively.")
Challenge.create(challenge:"This question was recently asked at a FAANG (Facebook, Amazon, Apple, Netflix, or Google) interview:\n\nYou have a warehouse containing several crates with a floor that is a grid system. Each crate's position can be described as an x,y point on the grid, with 0,0 representing the loading dock entrance where the crates are loaded onto a truck.\n\nYou have to create a function called cratesInOrder() that takes as input an array of points, and returns back the position of the crate closest to the dock entrance.\n\nfor example\n\n[[1,2],[3,4],[2,3]] would return [1,2] because that is the location of the crate closest to the dock entrance.\n\n\nhint: use Pythagorean theorem to determine the distance of the crate from the entrance.\n")
Challenge.create(challenge:"\nGiven a string, determine how many re-arrangements of letters you can have without having two duplicate letters next to each other. For example:\n\n\"cook\" = \"ocok\", \"koco\", \"okoc\", \"coko\" = 4 re-arrangements. \"kooc\" does not count because two duplicate letters are next to each other.\n\nTherefore, create a function called noDuplicates() that takes as input a string and returns the total number of re-arrangements possible.")
Challenge.create(challenge:"Given two numbers, return the number of times the same number is in the same position in both numbers. For example:\n\n1221 and 2123 = 1 times, because the 2 in the tens place 12(2)1 and 21(2)3, are the same.\n\n14352 and 16335 = 2 times, because the 1 in the ten thousands place and the 3 in the hundreds place are the same among the two numbers. (1)4(3)52 and (1)6(3)35\n\nTherefore, create a function called matchDigits() that takes as input two numbers, and returns an integer that is the number of times the same number is in the same place between the two numbers.")
Challenge.create(challenge:"Given a string and a number, split the string and numbers so that you place the numbers in between the letters. For example:\n\n\"hurry\" and 1234 = \"h1u2r3r4y\"\n\n\"number\" and 345 = \"n3u4m5ber\"\n\n\"cat\" and 345678 = \"c3a4t5678\"\n\nTherefore create a function called inBetween() that takes a string as the first argument and a number as the second argument, and returns a new string with the numbers put in between the letters.")